{"version":3,"sources":["webpack:///./src/app/Components/books/add-books/add-books.component.html","webpack:///./src/app/Components/books/add-books/add-books.component.scss","webpack:///./src/app/Components/books/add-books/add-books.component.ts","webpack:///./src/app/Components/books/books-routing.module.ts","webpack:///./src/app/Components/books/books.module.ts"],"names":[],"mappings":"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","file":"Components-books-books-module.js","sourcesContent":["module.exports = \"<section class='container-fluid'>\\n\\n  <div class=\\\"cards-heading\\\">\\n  <img class=\\\"dashboard-img\\\" src=\\\"../../assets/images/metrics (1).png\\\">\\n  <h1 *ngIf=\\\"check\\\">Add Book</h1>\\n  <h1 *ngIf=\\\"!check\\\">Edit Book</h1>\\n\\n  </div>\\n\\n  <div class=\\\"form\\\">\\n      <form name=\\\"myForm\\\" #addBookForm=\\\"ngForm\\\"  novalidate>\\n      \\n          <div class=\\\"row form-group\\\">\\n              <div class=\\\"col-md-6\\\">\\n                  <input    type=\\\"text\\\" \\n                            placeholder=\\\"Book Name\\\" \\n                            name=\\\"title\\\"\\n                            [(ngModel)]=\\\"model.title\\\"\\n                             #title=\\\"ngModel\\\"\\n                            class=\\\"form-control\\\" \\n                            [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && title.invalid }\\\"\\n                            required\\n                            />\\n                  <div *ngIf=\\\"addBookForm.submitted && title.invalid\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"title.errors.required\\\">Book Name is required</div>\\n                  </div>\\n                \\n              </div>\\n              <div class=\\\"col-md-6\\\">\\n                    <input type=\\\"text\\\" \\n                            placeholder=\\\"Publisher\\\" \\n                            [(ngModel)]=\\\"model.publisher\\\"\\n                             #publisher=\\\"ngModel\\\"\\n                             required\\n                             name=\\\"publisher\\\"\\n                            class=\\\"form-control\\\" \\n                            [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && publisher.invalid }\\\"\\n                    />\\n                    <div *ngIf=\\\"addBookForm.submitted && publisher.invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"publisher.errors.required\\\">Publisher is required</div>\\n                    </div>\\n              </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n              <div class=\\\"col-md-6\\\">\\n                <input type=\\\"text\\\" \\n                        placeholder=\\\"ISBN Code\\\" \\n                        [(ngModel)]=\\\"model.isbnCode\\\"\\n                        #isbnCode=\\\"ngModel\\\"\\n                        name=\\\"isbnCode\\\"\\n                        required\\n                        class=\\\"form-control\\\" \\n                        [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && isbnCode.invalid }\\\"\\n                        />\\n                <div *ngIf=\\\"addBookForm.submitted && isbnCode.invalid\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"isbnCode.errors.required\\\">ISBN Code is required</div>\\n                </div>\\n              </div>\\n              <div class=\\\"col-md-6\\\">\\n                  <div class=\\\"date\\\">\\n                            <input  \\n                                [matDatepicker]=\\\"picker\\\"  \\n                                placeholder=\\\"Publication Date\\\" \\n                                [(ngModel)]=\\\"model.publicationDate\\\"\\n                                #publicationDate=\\\"ngModel\\\"\\n                                name=\\\"publicationDate\\\"\\n                                required\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && publicationDate.invalid }\\\"\\n                            />\\n                          <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                          <mat-datepicker #picker></mat-datepicker>\\n                  </div>\\n              \\n                    <div *ngIf=\\\"addBookForm.submitted && publicationDate.invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"publicationDate.errors.required\\\">Publication Date is required</div>\\n                    </div>\\n              </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n              <div class=\\\"col-md-6\\\">\\n                    <input type=\\\"text\\\" \\n                            placeholder=\\\"Author Name\\\" \\n                            [(ngModel)]=\\\"model.author\\\"\\n                            #author=\\\"ngModel\\\"\\n                            required\\n                            name=\\\"author\\\"\\n                            class=\\\"form-control\\\" \\n                            [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && author.invalid }\\\" \\n                    />\\n                    <div *ngIf=\\\"addBookForm.submitted && author.invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"author.errors.required\\\">Author Name is required</div>\\n                    </div>\\n              </div>\\n              <div class=\\\"col-md-6\\\">\\n                    <input type=\\\"text\\\" \\n                            placeholder=\\\"Cover Page\\\" \\n                            [(ngModel)]=\\\"model.bookCoverPage\\\"\\n                            #bookCoverPage=\\\"ngModel\\\"\\n                            name=\\\"bookCoverPage\\\"\\n                            required\\n                            class=\\\"form-control\\\" \\n                            [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && bookCoverPage.invalid }\\\" \\n                    />\\n                    <div *ngIf=\\\"addBookForm.submitted && bookCoverPage.invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"bookCoverPage.errors.required\\\">Cover Page is required</div>\\n                    </div>\\n              </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n              <div class=\\\"col-md-6\\\">\\n                    <textarea type=\\\"text\\\" \\n                                placeholder=\\\"Description\\\" \\n                                [(ngModel)]=\\\"model.bookDescription\\\"\\n                                #bookDescription=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"bookDescription\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && bookDescription.invalid }\\\"  >\\n                    </textarea>\\n                    <div *ngIf=\\\"addBookForm.submitted && bookDescription.invalid\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"bookDescription .errors.required\\\">Description is required</div>\\n                    </div>\\n              </div>\\n              <div class=\\\"col-md-6\\\">\\n                  <div class=\\\"row\\\">\\n                      <div class=\\\"col-md-12\\\">\\n                                <input type=\\\"text\\\" \\n                                        placeholder=\\\"No. of Pages\\\" \\n                                        [(ngModel)]=\\\"model.numberOfPages\\\"\\n                                        #numberOfPages=\\\"ngModel\\\"\\n                                        required\\n                                        name=\\\"numberOfPages\\\"\\n                                        class=\\\"form-control\\\" \\n                                        [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && numberOfPages.invalid }\\\"  \\n                                        />\\n                                <div *ngIf=\\\"addBookForm.submitted && numberOfPages.invalid\\\" class=\\\"invalid-feedback\\\">\\n                                    <div *ngIf=\\\"numberOfPages.errors.required\\\">No. of Pages is required</div>\\n                                </div>\\n                      </div>\\n                      <div class=\\\"col-md-12 mt-3\\\">\\n                              <input type=\\\"text\\\" \\n                                    placeholder=\\\"Sample Page Url\\\" \\n                                    [(ngModel)]=\\\"model.samplePageUrl\\\"\\n                                    #samplePageUrl=\\\"ngModel\\\"\\n                                    required\\n                                    name=\\\"samplePageUrl\\\"\\n                                    class=\\\"form-control\\\" \\n                                    [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && samplePageUrl.invalid }\\\"  \\n                                    />\\n                              <div *ngIf=\\\"addBookForm.submitted && samplePageUrl.invalid\\\" class=\\\"invalid-feedback\\\">\\n                                  <div *ngIf=\\\"samplePageUrl.errors.required\\\">Sample Page Url is required</div>\\n                              </div>\\n                      </div>\\n                  </div>\\n              </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n                  <div class=\\\"col-md-6\\\">\\n                        <select placeholder=\\\"Select bookGenre\\\" \\n                                name=\\\"bookGenre\\\" \\n                                id=\\\"genreId\\\" \\n                                [(ngModel)]=\\\"model.genreId\\\"\\n                                #genreId=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"genreId\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && genreId.invalid }\\\"   \\n                        >\\n                                <option value=\\\"undefined\\\" hidden>Select Genre</option>\\n                                <option *ngFor=\\\"let id of comboBoxesbookGenre\\\" [value]=\\\"id.genre_id\\\"\\n                                (onSelectionChange)=\\\"comboGenr($event,id)\\\">{{id.genre}}\\n                                </option>\\n                        </select>\\n                        <div *ngIf=\\\"addBookForm.submitted && genreId.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"genreId .errors.required\\\">Select Genre is required</div>\\n                        </div>\\n                  </div>\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" \\n                                placeholder=\\\"Image Url1\\\" \\n                                [(ngModel)]=\\\"model.imagesUrl1\\\"\\n                                #imagesUrl1=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"imagesUrl1\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && imagesUrl1.invalid }\\\"   \\n                        />\\n                        <div *ngIf=\\\"addBookForm.submitted && imagesUrl1.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"imagesUrl1.errors.required\\\">Image Url1 is required</div>\\n                        </div>\\n                  </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" \\n                                placeholder=\\\"Edition\\\" \\n                                [(ngModel)]=\\\"model.edition\\\"\\n                                #edition=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"edition\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && edition.invalid }\\\"  \\n                        />\\n                        <div *ngIf=\\\"addBookForm.submitted && edition.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"edition .errors.required\\\">Edition is required</div>\\n                        </div>\\n                  </div>\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" \\n                                placeholder=\\\"Image Url2\\\" \\n                                [(ngModel)]=\\\"model.imagesUrl2\\\"\\n                                #imagesUrl2=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"imagesUrl2\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && imagesUrl2.invalid }\\\"  \\n                        />\\n                        <div *ngIf=\\\"addBookForm.submitted && imagesUrl2.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"imagesUrl2.errors.required\\\">Image Url2 is required</div>\\n                        </div>\\n                  </div>\\n          </div>\\n\\n\\n          <div class=\\\"row form-group\\\">\\n                  <div class=\\\"col-md-6\\\">\\n                        <select placeholder=\\\"Select Owner\\\" \\n                                name=\\\"ownerId\\\" \\n                                id=\\\"ownerId\\\" \\n                                [(ngModel)]=\\\"model.ownerId\\\"\\n                                #ownerId=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"ownerId\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && ownerId.invalid }\\\"   \\n                         >\\n                            <option value=\\\"undefined\\\" hidden>Select Owner</option>\\n                            <option  value=\\\"1\\\">omniwyse</option>\\n                        </select>\\n                        <div *ngIf=\\\"addBookForm.submitted && ownerId.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"ownerId .errors.required\\\">Owner is required</div>\\n                        </div>\\n                  </div>\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" \\n                                placeholder=\\\"Rental Value\\\" \\n                                [(ngModel)]=\\\"model.rentPerDay\\\"\\n                                #rentPerDay=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"rentPerDay\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && rentPerDay.invalid }\\\" \\n                        />\\n                        <div *ngIf=\\\"addBookForm.submitted && rentPerDay.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"rentPerDay.errors.required\\\">Rental Value is required</div>\\n                        </div>\\n                  </div>\\n          </div>\\n\\n          <div class=\\\"row form-group\\\">\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"text\\\" \\n                                placeholder=\\\"Price\\\" \\n                                [(ngModel)]=\\\"model.bookPrice\\\"\\n                                #bookPrice=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"bookPrice\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && bookPrice.invalid }\\\" \\n                        />\\n                        <div *ngIf=\\\"addBookForm.submitted && bookPrice.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"bookPrice.errors.required\\\">Book Price is required</div>\\n                        </div>\\n                  </div>\\n                  <div class=\\\"col-md-6\\\">\\n                        <input type=\\\"number\\\" \\n                                placeholder=\\\"No.of Copies\\\" \\n                                [(ngModel)]=\\\"model.stock\\\"\\n                                #stock=\\\"ngModel\\\"\\n                                required\\n                                name=\\\"stock\\\"\\n                                class=\\\"form-control\\\" \\n                                [ngClass]=\\\"{ 'is-invalid': addBookForm.submitted && stock.invalid }\\\" \\n                            />\\n                        <div *ngIf=\\\"addBookForm.submitted && stock.invalid\\\" class=\\\"invalid-feedback\\\">\\n                            <div *ngIf=\\\"stock.errors.required\\\">No.of Copies is required</div>\\n                        </div>\\n                  </div>\\n          </div>\\n\\n          \\n          <div class=\\\"form-group\\\">\\n                <button mat-raised-button style=\\\"background-color: rgb(78, 75, 75) ;color: #ffffff; width: 8vw;height: 40px;\\\" (click)=\\\"cancel()\\\" \\n                class=\\\" mr-3 mat-raised-button mat-warn mat-cancel\\\"> Cancel</button>\\n          \\n                <button mat-raised-button style=\\\"background-color: #2fc7f5 ;color: #ffffff;width: 8vw;height: 40px;\\\" *ngIf=\\\"check\\\" (click)=\\\"onSubmit()\\\"\\n                 class=\\\"mr-3 mat-raised-button mat-primary\\\">Save</button>\\n      \\n                 <button mat-raised-button style=\\\"background-color: #2fc7f5 ;color: #ffffff;width: 8vw;height: 40px;\\\" *ngIf=\\\"!check\\\" (click)=\\\"editBooks(addBookForm)\\\" \\n                 class=\\\"mat-raised-button mat-primary\\\">Update</button>\\n          \\n          </div>\\n      </form>\\n  </div>\\n</section>\\n\\n\"","module.exports = \".cards {\\n  display: -webkit-flex;\\n  display: flex;\\n  -webkit-flex-flow: row wrap;\\n  -webkit-justify-content: space-around;\\n          justify-content: space-around; }\\n\\n.cards-heading {\\n  display: -webkit-flex;\\n  display: flex;\\n  margin-left: 13px; }\\n\\n.cards-heading h1 {\\n    font-size: 24px;\\n    font-weight: 600;\\n    margin: 10px 16px;\\n    color: #707070; }\\n\\n.form {\\n  border-radius: 10px;\\n  box-shadow: 0 3px 6px 0 rgba(157, 206, 255, 0.16);\\n  background-color: #ffffff;\\n  padding: 60px;\\n  margin-top: 40px; }\\n\\n.form input {\\n    height: 48px;\\n    border-radius: 3px;\\n    border: solid 1px #c8c8c8;\\n    background-color: #ffffff; }\\n\\n.form textarea {\\n    height: 110px;\\n    border-radius: 3px;\\n    border: solid 1px #c8c8c8;\\n    background-color: #ffffff; }\\n\\n.form .date {\\n    display: -webkit-flex;\\n    display: flex; }\\n\\n.form mat-datepicker-toggle.mat-datepicker-toggle {\\n    margin-left: -48px;\\n    margin-top: 4px; }\\n\\n.mat-datepicker-input-container {\\n  width: 300px;\\n  height: 23vw; }\\n\\n.mat-calendar {\\n  zoom: \\\"0.75\\\"; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VidW50dS93aXNlcmVhZHNla3N1aS93aXNlcmVhZHMtbmV3dWkvc3JjL2FwcC9Db21wb25lbnRzL2Jvb2tzL2FkZC1ib29rcy9hZGQtYm9va3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxxQkFBYTtFQUFiLGFBQWE7RUFDYiwyQkFBMkI7RUFDM0IscUNBQTZCO1VBQTdCLDZCQUE2QixFQUFBOztBQUkvQjtFQUNFLHFCQUFhO0VBQWIsYUFBYTtFQUNiLGlCQUFnQixFQUFBOztBQUZsQjtJQUlJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGNBQ0YsRUFBQTs7QUFLSjtFQUNFLG1CQUFtQjtFQUNuQixpREFBaUQ7RUFDakQseUJBQXlCO0VBQ3pCLGFBQVk7RUFDWixnQkFBZSxFQUFBOztBQUxqQjtJQU9NLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLHlCQUF5QixFQUFBOztBQVYvQjtJQWNJLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLHlCQUF5QixFQUFBOztBQWpCN0I7SUFxQkkscUJBQVk7SUFBWixhQUFZLEVBQUE7O0FBckJoQjtJQXdCSSxrQkFBa0I7SUFDbEIsZUFBZSxFQUFBOztBQUduQjtFQUNFLFlBQVk7RUFDWixZQUNGLEVBQUE7O0FBQ0E7RUFBZSxZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9Db21wb25lbnRzL2Jvb2tzL2FkZC1ib29rcy9hZGQtYm9va3MuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZHN7XG4gICAgZGlzcGxheTogZmxleDsgXG4gICAgLXdlYmtpdC1mbGV4LWZsb3c6IHJvdyB3cmFwO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBcbiAgfVxuXG4gIC5jYXJkcy1oZWFkaW5ne1xuICAgIGRpc3BsYXk6IGZsZXg7IFxuICAgIG1hcmdpbi1sZWZ0OjEzcHg7XG4gICAgaDF7XG4gICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgbWFyZ2luOiAxMHB4IDE2cHg7XG4gICAgICBjb2xvcjogIzcwNzA3MFxuICAgIH1cbiAgfVxuXG5cblxuLmZvcm17XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJveC1zaGFkb3c6IDAgM3B4IDZweCAwIHJnYmEoMTU3LCAyMDYsIDI1NSwgMC4xNik7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gIHBhZGRpbmc6NjBweDtcbiAgbWFyZ2luLXRvcDo0MHB4O1xuICBpbnB1dHtcbiAgICAgIGhlaWdodDogNDhweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgIGJvcmRlcjogc29saWQgMXB4ICNjOGM4Yzg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICB9XG5cbiAgdGV4dGFyZWF7XG4gICAgaGVpZ2h0OiAxMTBweDtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgYm9yZGVyOiBzb2xpZCAxcHggI2M4YzhjODtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICB9XG5cbiAgLmRhdGV7XG4gICAgZGlzcGxheTpmbGV4O1xuICB9XG4gIG1hdC1kYXRlcGlja2VyLXRvZ2dsZS5tYXQtZGF0ZXBpY2tlci10b2dnbGUge1xuICAgIG1hcmdpbi1sZWZ0OiAtNDhweDtcbiAgICBtYXJnaW4tdG9wOiA0cHg7XG59XG59XG4ubWF0LWRhdGVwaWNrZXItaW5wdXQtY29udGFpbmVyIHtcbiAgd2lkdGg6IDMwMHB4O1xuICBoZWlnaHQ6IDIzdndcbn1cbi5tYXQtY2FsZW5kYXJ7IHpvb206XCIwLjc1XCIgfSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, NgForm } from '@angular/forms';\n\nimport { BooksService } from '../../../services/books.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SaveUserService } from 'src/app/services/save-user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-books',\n  templateUrl: './add-books.component.html',\n  styleUrls: ['./add-books.component.scss']\n})\nexport class AddBooksComponent implements OnInit {\n  private selectUndefinedOptionValue:any;\n  submitted = false;\n  addbook:any\n  addBookForm: FormGroup;\n  comboBoxesbookGenre: any;\n  model: any = {};\n  regId: string;\n  check = true;\n  constructor(  private formBuilder: FormBuilder, \n                private books: BooksService, \n                private router: Router,\n                private saveUserService: SaveUserService,\n                private route: ActivatedRoute,\n                private toastr: ToastrService) \n                { \n                  this.route.params.subscribe(params => {\n                    if (params) {\n                      this.regId = params.id;\n                      // console.log(this.regId)\n                    }\n                  });\n                }\n\n  ngOnInit() {\n  \n    if (this.regId) {\n      this.loadEditBook(this.regId);\n    }\n\n    this.loadComboBoxes();\n  }\n\n\n  onSubmit() {\n    this.model.createdBy = localStorage.getItem('username');\n    this.books.AddBooks(this.model).subscribe(\n      (data: any) => {\n        console.log(data)\n        if(data.resultsMap.book){\n          this.toastr.success(\"Book Details added successfully\");\n          this.router.navigateByUrl('/book_list');\n        }\n      },\n      error => {\n        this.toastr.warning(error.error.message);\n      }\n    );\n  }\n\n  loadEditBook(regId) {\n    this.check = false\n    this.books.loadbook(regId).subscribe(\n      (data: any) => {\n        console.log(data)\n        this.model = data.resultsMap.book;\n        this.model.publicationDate = data.resultsMap.book ? new Date(data.resultsMap.book.publicationDate) : '';\n      },\n      error => {\n        this.toastr.warning(error.error.message);\n      }\n    );\n  }\n\n  editBooks(myForm: NgForm) {\n    if(myForm.valid) {\n    this.model.createdBy = localStorage.getItem('username');\n    this.books.editbook(this.model).subscribe(\n      (data: any) => {\n        // console.log('addUser Object', this.addUser);\n        // console.log('edit books',data)\n        if (data.resultsMap.book) {\n          this.toastr.success(data.message);\n          this.router.navigateByUrl('/book_list');\n        } else\n        {\n          this.toastr.warning(data.message);\n        }\n      },\n      error => {\n        console.log(error);\n        this.toastr.warning(error.error.message);\n      }\n    );\n    }\n  }\n\n  loadComboBoxes() {\n    const body = [\n      'roles',\n      'bookGenre',\n      'gender',\n      'bookCondition',\n      'userStatus'\n    ];\n    this.saveUserService.loadComboDropDowns(body).subscribe(\n      (data: any) => {\n        if (data) {\n          this.comboBoxesbookGenre = data.result.bookGenre;\n          // console.log('comboDropDowns', this.comboBoxesbookGenre);\n        }\n      },\n    );\n  }\n\n  comboGenr($event, id): void {\n    if ($event.source.selected) {\n      this.addbook.genreId = id.genre_id;\n    }\n  }\n\n  cancel() {\n    this.router.navigateByUrl('/book_list');\n  }\n\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddBooksComponent } from './add-books/add-books.component';\n\n\nconst routes: Routes = [\n  {\n    path: '', component: AddBooksComponent\n  },\n \n  \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BooksRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatNativeDateModule, MatSelectModule, MatDatepickerModule} from '@angular/material';\nimport { BooksRoutingModule } from './books-routing.module';\nimport { AddBooksComponent } from './add-books/add-books.component';\n\n\n@NgModule({\n  declarations: [AddBooksComponent],\n  imports: [\n    CommonModule,\n    BooksRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    MatDatepickerModule\n  ]\n})\nexport class BooksModule { }\n"],"sourceRoot":""}