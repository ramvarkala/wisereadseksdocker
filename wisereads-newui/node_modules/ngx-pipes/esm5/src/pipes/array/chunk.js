/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isString } from '../helpers/helpers';
var ChunkPipe = /** @class */ (function () {
    function ChunkPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} size
     * @return {?}
     */
    ChunkPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} size
     * @return {?}
     */
    function (input, size) {
        if (size === void 0) { size = 1; }
        if (isString(input)) {
            return this.chunk(input
                .split(''), size);
        }
        return Array.isArray(input) ? this.chunk(input, size) : input;
    };
    /**
     * @private
     * @param {?} input
     * @param {?} size
     * @return {?}
     */
    ChunkPipe.prototype.chunk = /**
     * @private
     * @param {?} input
     * @param {?} size
     * @return {?}
     */
    function (input, size) {
        return Array(Math.ceil(input.length / size))
            .fill([])
            .map((/**
         * @param {?} _
         * @param {?} index
         * @return {?}
         */
        function (_, index) { return index * size; }))
            .map((/**
         * @param {?} begin
         * @return {?}
         */
        function (begin) { return input.slice(begin, begin + size); }));
    };
    ChunkPipe.decorators = [
        { type: Pipe, args: [{ name: 'chunk' },] }
    ];
    return ChunkPipe;
}());
export { ChunkPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmsuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvY2h1bmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5QztJQUFBO0lBaUJBLENBQUM7Ozs7OztJQWZDLDZCQUFTOzs7OztJQUFULFVBQVUsS0FBVSxFQUFFLElBQWdCO1FBQWhCLHFCQUFBLEVBQUEsUUFBZ0I7UUFDcEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUs7aUJBQ3BCLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUVELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoRSxDQUFDOzs7Ozs7O0lBRU8seUJBQUs7Ozs7OztJQUFiLFVBQWMsS0FBWSxFQUFFLElBQVk7UUFDdEMsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ3pDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDUixHQUFHOzs7OztRQUFDLFVBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSyxPQUFBLEtBQUssR0FBRyxJQUFJLEVBQVosQ0FBWSxFQUFDO2FBQy9CLEdBQUc7Ozs7UUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBaEMsQ0FBZ0MsRUFBQyxDQUFDO0lBQ3BELENBQUM7O2dCQWhCRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFOztJQWlCdkIsZ0JBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWhCWSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdjaHVuaycgfSlcbmV4cG9ydCBjbGFzcyBDaHVua1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIHNpemU6IG51bWJlciA9IDEpOiBhbnkge1xuICAgIGlmIChpc1N0cmluZyhpbnB1dCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNodW5rKGlucHV0XG4gICAgICAgIC5zcGxpdCgnJyksIHNpemUpO1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0KSA/IHRoaXMuY2h1bmsoaW5wdXQsIHNpemUpIDogaW5wdXQ7XG4gIH1cblxuICBwcml2YXRlIGNodW5rKGlucHV0OiBhbnlbXSwgc2l6ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIEFycmF5KE1hdGguY2VpbChpbnB1dC5sZW5ndGggLyBzaXplKSlcbiAgICAgIC5maWxsKFtdKVxuICAgICAgLm1hcCgoXywgaW5kZXgpID0+IGluZGV4ICogc2l6ZSlcbiAgICAgIC5tYXAoYmVnaW4gPT4gaW5wdXQuc2xpY2UoYmVnaW4sIGJlZ2luICsgc2l6ZSkpO1xuICB9XG59XG4iXX0=